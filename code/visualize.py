import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns



def protopsacer_occurance_figure(counts, top_n=None):
    """Creates the histogram of occurances of each protospacer.
    """
    count_ser = pd.Series(counts.values())
    
    fig, ax = plt.subplots(1,1)
    
    sns.histplot(count_ser, 
                 legend=False, 
                 element='step', 
                 bins=np.arange(0, count_ser.max()+10, 10))
    
    ax.set_xlabel('Occurances')
    ax.set_ylabel('protospacers')
    ax.set_yscale('log')
    
    if top_n is not None:
        top_n = min(len(count_ser), top_n)
        min_val = list(count_ser.sort_values())[-top_n]
        ax.axvline(min_val, color = 'k')
    
    sns.despine(ax=ax)
    fig.tight_layout()
    
    return fig


def mutation_count_figure(mutation_counts):
    """Creates the histogram of the number of mutations of each protospacer.
    """
    
    mut_counts = pd.Series(mutation_counts)
    fig, ax = plt.subplots(1,1)
    
    ax = sns.histplot(mut_counts, 
                      bins=np.arange(max(mut_counts)+1), 
                      ax=ax)
    ax.set_xlabel('Mutations')
    
    sns.despine(ax=ax)
    fig.tight_layout()
    
    return fig


def ontarget_hit_figure(protospacer_hits, min_rate=None):
    
    nunique_chroms = len(protospacer_hits['chrom'].unique())
    top_mm_counts = protospacer_hits.groupby('protospacer')['chrom'].nunique()
        
    freq = top_mm_counts/nunique_chroms
    
    fig, ax = plt.subplots(1,1)
    sns.histplot(top_mm_counts, 
                 ax=ax)
    
    if min_rate is not None:
        ax.axvline(nunique_chroms*min_rate, color = 'k')
    
    ax.set_xlabel('On Target Hits')
    ax.set_ylabel('Protospacers')
    sns.despine(ax=ax)
    
    return fig

def offtarget_hit_figure(top_mm_counts, max_allowed=0):
    
    fig, ax = plt.subplots(1,1)
    sns.histplot(top_mm_counts, 
                 ax=ax)
    
    ax.set_xlabel('Off-Target Hits')
    ax.set_ylabel('Protospacers')
    sns.despine(ax=ax)
    
    return fig



def reference_mapping_figure(reference_mapping_df, protospacer_scores, 
                             ylabel='Protospacer Occurrence', **scatter_kws):
    """Create a figure that displays the position of each protospacer against the score.
    
    reference_mapping_df: dataframe as generated by NDNFPipeline.reference_map
    protospacer_scores: any dict like object that maps protospacers to scores
    """
    
    scores = reference_mapping_df['protospacer'].map(protospacer_scores.get)
    
    fig, ax = plt.subplots(1,1)
    sns.scatterplot(data = reference_mapping_df,
                     x = 'start', y = scores,
                    **scatter_kws)
    
    ax.set_xlabel('Reference Position')
    ax.set_ylabel(ylabel)
    sns.despine(ax=ax)
    
    return fig